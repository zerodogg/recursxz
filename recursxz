#!/usr/bin/perl
use 5.010;
use strict;
use warnings;
use File::Find;
use File::Basename qw(dirname basename);
use File::stat;
use IPC::Open2;
use Cwd qw(realpath);
use Getopt::Long;
use constant {
    MODE_NORMAL => 1,
    MODE_LOWHANGING => 2,
    MODE_LOWHANGING_SMART => 3,
    MODE_SMASH => 4,
    MODE_FAST => 5,

	# Verbosity levels
	M_STANDARD => 1,
	M_VERBOSE => 2,
	M_VERYVERBOSE => 3,
	M_DEBUG => 4,

    true => 1,
    false => 0,
};


$SIG{INT} = sub
{
    print 'Interrupted'."\n";
    wexit(1);
};

my $VERSION    = '0.1';
my $total      = 0;
my $after      = 0;
my $olderThan  = 0;
my $dryRun     = false;
my $mode       = MODE_NORMAL;
my $verbosity  = M_STANDARD;
my $recompress = false;
my $forceCompressLevel;

# Purpose: Exit with the supplied return value, outputting saved space
#       information if needed
# Usage: wexit(RETURN VALUE);
sub wexit
{
    if ($total > 0)
    {
        my ($saved,$type) = fsize($total-$after);
        if ($saved > 0)
        {
            print 'Saved '.$saved.' '.$type."\n";
        }
        else
        {
            print 'Lost '.$saved.' '.$type;
            if ($recompress)
            {
                print ' (likely due to recompression)';
            }
            print "\n";
        }
    }
    exit(shift(@_));
}

# Purpose: Use 'file' to find out if a file is a text file or not
# Usage: bool = IsText('path/to/file');
sub IsText
{
    my $file = shift;
    open2(my $out,my $in,'file','--brief','--mime-type',$file);
    my $type = <$out>;
    close($out) if $out;close($in) if $in;
    chomp($type);
    return $type =~ m{^text/};
}

# Purpose: Process a file, compressing if needed
# Usage: ProcessFile(FILE);
sub ProcessFile
{
    my $file      = shift;
    my $recompressAble = qr/\.(gz|bz2|lzma)$/;
    my $compressed = qr/\.(rar|zip|rpm|deb|ace|bin|tgz|tbz2|txz|xz|gz|bz2|lzma)$/;
    my $size_100K = 102400;
    my $size_1M   = 1048576;
    my $size_8M   = 8388608;
    my $size_16M  = 16777216;
    my $size_32M  = 33554432;
    my $size_100M = 104857600;
    my $skipReason;
    if ($recompress && $recompress eq 'gz')
    {
        $recompressAble = qr/\.(gz)$/;
    }
    if (-d $file)
    {
        $skipReason = 'is a directory';
    }
    elsif(!-f $file)
    {
        $skipReason = 'is not a regular file';
    }
    elsif (! -w $file)
    {
        $skipReason = 'is not writable';
        return;
    }
    elsif(-l $file)
    {
        $skipReason = 'is a symlink';
    }
    elsif(! -w dirname($file))
    {
        $skipReason = 'parent directory is not writable';
    }
    elsif($olderThan && stat($file)->mtime > $olderThan)
    {
        $skipReason = 'modification time too recent';
    }
    elsif ($file =~ $compressed)
    {
        if (!$recompress || $file !~ $recompressAble)
        {
            if ($mode == MODE_SMASH && $file !~ /\.xz$/)
            {
                printv(M_VERYVERBOSE,'Would skip '.$file.', but running in smash mode so continuing'."\n");
            }
            else
            {
                $skipReason = 'filetype excluded';
            }
        }
    }

    if ($skipReason)
    {
        printv(M_VERYVERBOSE,'Skipping '.$file.': '.$skipReason."\n");
        return;
    }

    if ($mode == MODE_LOWHANGING || $mode == MODE_LOWHANGING_SMART || $mode == MODE_FAST)
    {
        if (-s $file < $size_1M)
        {
            my $skip = true;
            if ($mode == MODE_LOWHANGING_SMART)
            {
                if (-s $file > $size_100K && IsText($file))
                {
                    printv(M_DEBUG,'Will compress text file '.$file.' in low hanging fruit mode');
                    $skip = false;
                }
            }
            if ($skip)
            {
                printv(M_VERYVERBOSE,'Skipping '.$file.': too small (low hanging fruit mode in effect)'."\n");
                return;
            }
        }
    }
    if ($mode == MODE_FAST)
    {
        if (-s $file > $size_100M)
        {
            printv(M_VERBOSE,'Skipping '.$file.': too large (fast mode in effect)'."\n");
            return;
        }
    }

    my @xz = qw(xz);

    my $pre = -s $file;
    my $realPre = $pre;
    if ($recompress && $file =~ $recompressAble)
    {
        if ($dryRun)
        {
            print "Would extract and recompress $file\n";
            return;
        }
        print "Extracting and recompressing $file ...\n";
        my $extracted = extractFile($file);
        if (!defined $extracted)
        {
            return;
        }
        if (!-e $extracted)
        {
            print "Failed to uncompress $file, ignoring.\n";
            return;
        }
        $file    = $extracted;
        $realPre = -s $file;
    }
    else
    {
        if ($dryRun)
        {
            print "Would compress $file\n";
            return;
        }
        print "Compressing $file ...\n";
    }

    if ($forceCompressLevel)
    {
        push(@xz,$forceCompressLevel);
    }
    else
    {
        if ($realPre > $size_32M)
        {
            push(@xz,'-9');
        }
        elsif($realPre > $size_16M)
        {
            push(@xz,'-8');
        }
        elsif($realPre > $size_8M)
        {
            push(@xz,'-7');
        }
        else
        {
            push(@xz,'-6');
        }
    }

    if(system(@xz,$file) != 0)
    {
        print 'xz '.$file.' failed'."\n";
        print 'Press Control+C within two seconds to exit.'."\n";
        sleep(2);
        print 'Continuing...'."\n";
        return;
    }
    if (! -e $file.'.xz')
    {
        print $file.'.xz did not exist after compression'."\n";
        print 'Press Control+C within two seconds to exit.'."\n";
        sleep(2);
        print 'Continuing...'."\n";
        return;
    }
    my $post = -s $file.'.xz';
    if ($post > $realPre)
    {
        my ($lost,$type) = fsize($post-$realPre);
        print 'Lost '.$lost.' '.$type.' by compressing '.$file.', uncompressing it...'."\n";
        system('unxz',$file.'.xz');
    }
    else
    {
        $total += $pre;
        $after += $post;
        if ( ($pre-$post) > 0)
        {
            printv(M_VERYVERBOSE,'Gained '.($pre-$post).' bytes by compressing '.$file."\n");
        }
        else
        {
            printv(M_VERYVERBOSE,'Lost '.($pre-$post).' bytes by re-compressing '.$file."\n");
        }
    }
}

# Purpose: Get the total file size and the type.
# Usage: my($s, $t) = fsize(size);
#  $t is MB, KB or B
#  $s is the size in $t rounded to the nearest:
#  	- single decimal if $t is MB
#  	- integer if $t is KB or B
sub fsize
{
	# The size
	my $size = shift;
	# The type it is
	my $type = 'B';
	# If it is above 1024 then convert to KB
	if ($size > 1_024)
	{
		$size = $size / 1_024;
		# If it is above 1024 still, convert to MB
		if ($size > 1_024)
		{
			$size = $size / 1_024;
			$type = 'MB';
		}
		else
		{
			$type = 'KiB';
		}
	}
	if ($type eq 'MiB')
	{
		$size = sprintf("%.1f",$size);
	}
	else
	{
		# Round it off to the closest integer
		$size = int($size + .5);
	}
	# Return it
	return($size,$type);
}

# Purpose: Print a message if verbosity level matches
# Usage: printv(VERBOSITY_LEVEL,message);
sub printv
{
	my $level = shift;
	if ($level > $verbosity)
	{
		return;
	}
	if ($level == M_DEBUG)
	{
		print 'Debug: ';
	}
	my $string = $_[0];
	$string =~ s/\n+/\n/;
	print $string;
	# Flush STDOUT
	$| = true;
	$| = false;
}

# Purpose: Print formatted --help output
# Usage: PrintHelp('-shortoption', '--longoption', 'description');
#  Description will be reformatted to fit within a normal terminal
sub PrintHelp
{
	# The short option
	my $short = shift,
	# The long option
	my $long = shift;
	# The description
	my $desc = shift;
	# The generated description that will be printed in the end
	my $GeneratedDesc;
	# The current line of the description
	my $currdesc = '';
	# The maximum length any line can be
	my $maxlen = 80;
	# The length the options take up
	my $optionlen = 20;

	# The length the short option take up
	my $shortlen = 4;
	if(length($short) > 4)
	{
		$shortlen = length($short);
	}

	# Check if the short/long are LONGER than optionlen, if so, we need
	# to do some additional magic to take up only $maxlen.
	# The +2 here is because we always add some space between them, no matter what
	if (($shortlen + length($long) + 2) > $optionlen)
	{
		$optionlen = $shortlen + length($long) + 2;
	}
	# Split the description into lines
	foreach my $part (split(/ /,$desc))
	{
		if(defined $GeneratedDesc)
		{
			if ((length($currdesc) + length($part) + 1 + $optionlen) > $maxlen)
			{
				$GeneratedDesc .= "\n";
				$currdesc = '';
			}
			else
			{
				$currdesc .= ' ';
				$GeneratedDesc .= ' ';
			}
		}
		$currdesc .= $part;
		$GeneratedDesc .= $part;
	}
	# Something went wrong
	die('Option mismatch') if not $GeneratedDesc;
	# Print it all
	foreach my $description (split(/\n/,$GeneratedDesc))
	{
		printf "%-4s %-15s %s\n", $short,$long,$description;
		# Set short and long to '' to ensure we don't print the options twice
		$short = '';$long = '';
	}
	# Succeed
	return true;
}

# Purpose: Print usage information and exit
sub usage
{
    print "recursxz version $VERSION\n\n";
    print 'Usage: ' . basename($0) . " [OPTIONS] dir1 dir2 ..\n";
    PrintHelp('-h','--help','Display this help screen');
    PrintHelp('','--version','Display version information');
    PrintHelp('','--lowhanging','Enable "low-hanging fruit mode", only compress files that are expected to give the highest gains in space');
    PrintHelp('','--fast','Like --lowhanging, but will also skip files >100MiB');
    PrintHelp('','--smash','Compress everything, even files already compressed with ie. gzip');
    PrintHelp('','--older-than N','Only compress files whose modification time is older than N days (where N is a positive integer)');
    PrintHelp('-c','--recompress','Uncompress any files compressed with gzip, bzip2 or lzma, and then compress them with xz (in addition to compressing uncompressed files)');
    PrintHelp('-g','--recompress-gz','Same as --recompress, but will only recompress gzip-compressed files');
    PrintHelp('','-0 .. -9','Force xz compression level. The default is dynamic (see manpage)');
    PrintHelp('','--dry-run','Show what would have been done, but don\'t actually do it');
    wexit(0);
}

# Purpose: Check for a file in path
# Usage: InPath(FILE)
sub InPath
{
	foreach (split /:/, $ENV{PATH}) { if (-x "$_/@_" and not -d "$_/@_" ) {	return 1; } } return 0;
}

# Purpose: Extract a file
# Usage: extractFile(FILE);
#
# Returns undef if the tool to uncompress was unavailable.
# Returns the new filename otherwise (which may or may not exist).
sub extractFile
{
    my $file = shift;

    given($file)
    {
        when(/\.bz2$/)
        {
            if (!InPath('bunzip2'))
            {
                print 'bunzip2 is not installed, can\'t uncompress'."\n";
                return;
            }
            system('bunzip2',$file);
            $file =~ s/\.bz2$//;
        }

        when(/\.gz$/)
        {
            if (!InPath('gunzip'))
            {
                print 'gunzip is not installed, can\'t uncompress'."\n";
                return;
            }
            system('gunzip',$file);
            $file =~ s/\.gz$//;
        }

        when(/\.lzma$/)
        {
            if (!InPath('unlzma'))
            {
                print 'unlzma is not installed, can\'t uncompress'."\n";
                return;
            }
            system('unlzma',$file);
            $file =~ s/\.lzma$//;
        }

        default
        {
            warn('Attempt to uncompress unknown filetype: '.$file."\n");
            wexit(132);
        }
    }
    return $file;
}

# Purpose: Get the version of a shell utility
# Usage: version = getVersionFrom('command');
sub getVersionFrom
{
    if (!InPath($_[0]))
    {
        return 'not installed';
    }
    eval('use IPC::Open3 qw(open3);');
    open3(my $in, my $out, my $err,@_);
    my $data;
    if ($out)
    {
        while(<$out>)
        {
            $data .= $_;
        }
    }
    if ($err)
    {
        while(<$err>)
        {
            $data .= $_;
        }
        close($err);
    }
    close($in);close($out);
    $data =~ s/\n.*//;
    $data =~ s/^\w+//;
    $data =~ s/^\D+(\S+).+/$1/s;
    $data =~ s/,//g;
    return $data;
}

# Purpose: Output some information useful for debugging and then exit
# Usage: debugInfo();
sub debugInfo
{
    print "recursxz version $VERSION\n";
	print "\n";
	my $pattern = "%-28s: %s\n";
    printf($pattern, 'Perl version', sprintf('%vd',$^V));
    foreach my $util (qw(xz bunzip2 gunzip unlzma file))
    {
        printf($pattern,$util.' version',getVersionFrom($util,'--version'));
    }

    eval('use Digest::MD5;');
    my $md5 = Digest::MD5->new();
    my $self = $0;
    if(not -f $self)
    {
        $self = InPath($self);
    }
    open(my $f,'<',$self);
    $md5->addfile($f);
    my $digest = $md5->hexdigest;
    close($f);
    printf($pattern,'MD5',$digest);

    wexit(0);
}

# Purpose: Main logic
sub main
{
    Getopt::Long::Configure ('bundling');
    GetOptions (
        'help|h' => \&usage,
        'normal' => sub
        {
            $mode = MODE_NORMAL;
        },
        'fast' => sub
        {
            $mode = MODE_FAST;
        },
        'lowhanging' => sub {
            if(InPath('file'))
            {
                $mode = MODE_LOWHANGING_SMART;
            }
            else
            {
                $mode = MODE_LOWHANGING;
            }
        },
        'smash' => sub {
            $mode = MODE_SMASH;
        },
        'v|verbose+' => \$verbosity,
        'older-than=i' => \$olderThan,
        'dry-run' => \$dryRun,
        'debuginfo' => \&debugInfo,
        'version' => sub {
            print "recursxz version $VERSION\n";
            exit(0);
        },
        'c|recompress' => \$recompress,
        'g|recompress-gz' => sub
        {
            $recompress = 'gz';
        },
        '0|1|2|3|4|5|6|7|8|9' => sub
        {
            shift;
            $forceCompressLevel = '-'.shift;
        },
    ) or die('See '.basename($0).' --help for more information'."\n");
    if (!@ARGV)
    {
        usage();
    }

    if (!InPath('xz'))
    {
        die("'xz' is not installed\n");
    }
    if (!InPath('unxz'))
    {
        die("'unxz' is not installed\n");
    }

    my @modeNames;
    $modeNames[MODE_SMASH]            = 'smash';
    $modeNames[MODE_LOWHANGING]       = '"low-hanging fruit"';
    $modeNames[MODE_LOWHANGING_SMART] = 'smart "low-hanging fruit"';
    $modeNames[MODE_NORMAL]           = 'normal';
    $modeNames[MODE_FAST]             = 'fast';

    if ($olderThan)
    {
        printv(M_VERBOSE,'Only processing files older than '.$olderThan.'days'."\n");
        $olderThan = time-($olderThan * 86400);
    }

    foreach my $Dir (@ARGV)
    {
        if (!$Dir)
        {
            usage();
        }
        elsif(! -d $Dir)
        {
            die($Dir.' is not a directory'."\n");
        }
        elsif(! -w $Dir)
        {
            die($Dir.' is not writable'."\n");
        }
        if ($> == 0)
        {
            die('Refusing to run as root'."\n");
        }
        print 'Operating on '.realpath($Dir).' in '.$modeNames[$mode].' mode'."\n";

        find({
                no_chdir => 1,
                wanted => sub { ProcessFile($File::Find::name); },
                preprocess => sub {
                    my @files;
                    foreach my $f (sort @_)
                    {
                        if ($f eq '.git')
                        {
                            next;
                        }
                        push(@files,$f);
                    }
                    return @files;
                },
            },
            $Dir
        );
    }
    wexit(0);
}

main(@ARGV);

__END__

=head1 NAME

recursxz - A program for recursively compressing files

=head1 SYNOPSIS

recursxz I<[OPTIONS]> I<dir1 dir2 ..>

=head1 DESCRIPTION

B<recursxz> is a tool for recursively compressing files in a directory tree.
It can ignore already compressed files, and will uncompress a file it has
compressed if it turns out that the compression led to the file growing and
not shrinking.

=head1 OPTIONS

=over

=item B<-h, --help>

Display a short help screen and exit

=item B<--version>

Display version information and exit

=item B<-v, --verbose>

Increases the verbosity of mussort. Supply up to four times to further increase
verbosity.

=item B<--normal>

Enable "normal" mode (this is the default). recursxz will search through a directory tree
and compress all files that are not already compressed.

=item B<--lowhanging>

Enable "low-hanging fruit mode". In this mode recursxz will only operate on files that
are 1MiB or larger. Simply put these are the files that you will gain the most from
compressing.

=item B<--fast>

This works like --lowhanging, but also adds an upper limit on 100 MiB (ie. all
files 100 MiB or larger will be ignored). This will give you a decent gain vs.
speed tradeoff.

=item B<--smash>

This enables SMASH mode. In this mode recursxz will compress everything it finds that's
not already compressed with xz, even files that are already compressed (ie. *.gz or *.zip).

The gain for using --smash vs. any other mode is usually somewhere between tiny and
nonexistent. Only use this if you require every byte possible as it will severely
slow down recursxz for almost no gain at all.

=item B<--older-than> I<N>

Only compress files whose modification time (mtime) is older than I<N> days.
This means that files that have been modified or created in the last I<N> days
will be skipped.

=item B<-c, --recompress>

Re-compress files that are already compressed with gzip, bzip2 or lzma.
Usually the gains you may see from this are minimal for trees with mostly
bzip2 or lzma files (and you may even in some cases lose space), the gains
for gzip-heavy trees are usually good (see --recompress-gz).

=item B<-g, --recompress-gz>

Same as --recompress, but only recompress gzip-compressed files.

=item B<-0 .. -9>

This sets which compression level will be used for I<xz>, see the manpage of xz
for more information. See the DEFAULT COMPRESSION LEVEL section for information about
the recursxz defauls.

=back

=head1 DEFAULT COMPRESSION LEVEL

The default compression level depends upon the size of the file
being compressed:

    File size   | Level
    > 32 MiB    | -9
    > 16 MiB    | -8
    >  8 MiB    | -7
    <  8 MiB    | -6

See the manpage for I<xz> for details on each compression level.

=head1 DEPENDENCIES

Requires that the I<xz>-tool is installed, as that is what is used to
perform the actual compression.

=head1 BUGS AND LIMITATIONS

If you find a bug, please report it at L<http://random.zerodogg.org/recursxz/bugs>.

=head1 INCOMPATIBILITIES

None known.

=head1 AUTHOR

B<recursxz> is written by Eskild Hustvedt I<<eskild -at- zerodogg d.ot org>>

=head1 LICENSE AND COPYRIGHT

Copyright (C) Eskild Hustvedt 2012

This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
